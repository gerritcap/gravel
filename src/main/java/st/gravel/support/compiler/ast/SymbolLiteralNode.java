package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.LiteralNode;
import st.gravel.support.compiler.ast.LiteralNode.LiteralNode_Factory;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

public class SymbolLiteralNode extends LiteralNode implements Cloneable {

	public static SymbolLiteralNode_Factory factory = new SymbolLiteralNode_Factory();

	st.gravel.core.Symbol _value;

	public static class SymbolLiteralNode_Factory extends LiteralNode_Factory {

		public SymbolLiteralNode basicNew() {
			SymbolLiteralNode newInstance = new SymbolLiteralNode();
			newInstance.initialize();
			return newInstance;
		}

		public SymbolLiteralNode value_(final st.gravel.core.Symbol _aSymbol) {
			return ((SymbolLiteralNode) this.basicNew().initializeValue_(_aSymbol));
		}
	}

	static public SymbolLiteralNode _value_(Object receiver, final st.gravel.core.Symbol _aSymbol) {
		return factory.value_(_aSymbol);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitSymbolLiteralNode_(this);
	}

	@Override
	public SymbolLiteralNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public SymbolLiteralNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return SymbolLiteralNode.this;
			}
		});
		return this;
	}

	public SymbolLiteralNode copy() {
		try {
			SymbolLiteralNode _temp1 = (SymbolLiteralNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean equals(final Object _anObject) {
		if (!super.equals(_anObject)) {
			return false;
		}
		if (this._value == null) {
			if (!(((SymbolLiteralNode) _anObject)._value == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.ObjectExtensions.equals_(this._value, ((SymbolLiteralNode) _anObject)._value)) {
				return false;
			}
		}
		return true;
	}

	public SymbolLiteralNode_Factory factory() {
		return factory;
	}

	@Override
	public int hashCode() {
		return (super.hashCode() ^ (_value == null ? 0 : _value.hashCode()));
	}

	public SymbolLiteralNode initializeValue_(final st.gravel.core.Symbol _aSymbol) {
		_value = _aSymbol;
		this.initialize();
		return this;
	}

	@Override
	public SymbolLiteralNode innerSourceOn_(final StringBuilder _aStream) {
		_aStream.append("" + _value);
		return this;
	}

	@Override
	public boolean isSymbolLiteralNode() {
		return true;
	}

	@Override
	public SymbolLiteralNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	@Override
	public SymbolLiteralNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public SymbolLiteralNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public SymbolLiteralNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	@Override
	public SymbolLiteralNode sourceOn_(final StringBuilder _aStream) {
		if (!this.needsBrackets()) {
			return SymbolLiteralNode.this.innerSourceOn_(_aStream);
		}
		_aStream.append('(');
		this.innerSourceOn_(_aStream);
		_aStream.append(')');
		return this;
	}

	@Override
	public st.gravel.core.Symbol value() {
		return _value;
	}

	@Override
	public SymbolLiteralNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public SymbolLiteralNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public SymbolLiteralNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return SymbolLiteralNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
