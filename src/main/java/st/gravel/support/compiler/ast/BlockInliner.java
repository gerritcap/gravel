package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.MethodNode;
import st.gravel.support.compiler.jvm.BlockSendArgument;
import st.gravel.support.compiler.ast.SystemMapping;
import st.gravel.support.compiler.ast.SequenceNode;
import java.util.List;
import st.gravel.support.compiler.ast.VariableDeclarationNode;
import java.util.ArrayList;
import st.gravel.support.compiler.ast.VariableNodeReplacer;
import st.gravel.support.compiler.ast.LiteralSendInliner;
import st.gravel.support.compiler.ast.KeywordMethodNode;
import st.gravel.support.compiler.jvm.JVMVariable;
import st.gravel.support.compiler.ast.HolderDeclarationNode;

public class BlockInliner extends Object implements Cloneable {

	public static BlockInliner_Factory factory = new BlockInliner_Factory();

	BlockSendArgument[] _astConstants;

	String[] _copiedArgumentNames;

	MethodNode _methodNode;

	SystemMapping _systemMapping;

	public static class BlockInliner_Factory extends st.gravel.support.jvm.SmalltalkFactory {

		public BlockInliner basicNew() {
			BlockInliner newInstance = new BlockInliner();
			newInstance.initialize();
			return newInstance;
		}

		public BlockInliner methodNode_astConstants_systemMapping_copiedArgumentNames_(final MethodNode _methodNode, final BlockSendArgument[] _astConstants, final SystemMapping _systemMapping, final String[] _copiedArgumentNames) {
			return this.basicNew().initializeMethodNode_astConstants_systemMapping_copiedArgumentNames_(_methodNode, _astConstants, _systemMapping, _copiedArgumentNames);
		}
	}

	static public BlockInliner _methodNode_astConstants_systemMapping_copiedArgumentNames_(Object receiver, final MethodNode _methodNode, final BlockSendArgument[] _astConstants, final SystemMapping _systemMapping, final String[] _copiedArgumentNames) {
		return factory.methodNode_astConstants_systemMapping_copiedArgumentNames_(_methodNode, _astConstants, _systemMapping, _copiedArgumentNames);
	}

	public BlockSendArgument[] astConstants() {
		return _astConstants;
	}

	public java.lang.invoke.MethodHandle build() {
		final SequenceNode[] _node;
		final MethodNode _inlined;
		final List<VariableDeclarationNode>[] _arguments;
		_node = new SequenceNode[1];
		_arguments = new List[1];
		_node[0] = _methodNode.body();
		_arguments[0] = new java.util.ArrayList();
		st.gravel.support.jvm.ArrayExtensions.with_do_(_astConstants, _methodNode.arguments(), new st.gravel.support.jvm.Block2<Object, BlockSendArgument, VariableDeclarationNode>() {

			@Override
			public Object value_value_(final BlockSendArgument _astConstant, final VariableDeclarationNode _arg) {
				if (_astConstant == null) {
					return _arguments[0].add(_arg);
				} else {
					return _node[0] = ((SequenceNode) VariableNodeReplacer.factory.in_replace_with_(_node[0], "aBlock", _astConstant.blockNode()));
				}
			}
		});
		for (final String _each : _copiedArgumentNames) {
			_arguments[0].add(BlockInliner.this.variableDeclarationNodeFor_(_each));
		}
		_inlined = LiteralSendInliner.factory.inline_(KeywordMethodNode.factory.selector_arguments_body_(_systemMapping.selectorConverter().selectorForNumArgs_(_arguments[0].size()), _arguments[0].toArray(new VariableDeclarationNode[_arguments[0].size()]), _node[0]));
		return this.compileMethodNode_(_inlined);
	}

	public java.lang.invoke.MethodHandle compileMethodNode_(final MethodNode _inlinedMethodNode) {
		final Class _javaClass;
		_javaClass = _systemMapping.compileInlinedMethod_(_inlinedMethodNode);
		return _systemMapping.compilerTools().methodHandleAt_numArgs_in_identityClass_isStatic_(_systemMapping.selectorConverter().selectorAsFunctionName_(st.gravel.core.Symbol.value(_inlinedMethodNode.selector())), _inlinedMethodNode.numArgs(), _javaClass, _javaClass, true);
	}

	public BlockInliner copy() {
		try {
			BlockInliner _temp1 = (BlockInliner) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public BlockInliner_Factory factory() {
		return factory;
	}

	public BlockInliner initialize() {
		return this;
	}

	public BlockInliner initializeMethodNode_astConstants_systemMapping_copiedArgumentNames_(final MethodNode _aMethodNode, final BlockSendArgument[] _anArray, final SystemMapping _anObject, final String[] _anObject1) {
		_methodNode = _aMethodNode;
		_astConstants = _anArray;
		_systemMapping = _anObject;
		_copiedArgumentNames = _anObject1;
		this.initialize();
		return this;
	}

	public MethodNode methodNode() {
		return _methodNode;
	}

	public BlockInliner postCopy() {
		return this;
	}

	public VariableDeclarationNode variableDeclarationNodeFor_(final String _varName) {
		for (final BlockSendArgument _astConstant : _astConstants) {
			if (_astConstant != null) {
				for (final JVMVariable _each : _astConstant.copiedVariables()) {
					if (st.gravel.support.jvm.StringExtensions.equals_(_each.varName(), _varName)) {
						return _each.type().isArrayType() ? HolderDeclarationNode.factory.name_(_each.varName()) : VariableDeclarationNode.factory.name_(_each.varName());
					}
				}
			}
		}
		throw new RuntimeException("cannot find varName: " + _varName);
	}
}
