package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.LiteralNode;
import st.gravel.support.compiler.ast.LiteralNode.LiteralNode_Factory;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

public class ReferenceLiteralNode extends LiteralNode implements Cloneable {

	public static ReferenceLiteralNode_Factory factory = new ReferenceLiteralNode_Factory();

	String[] _path;

	public static class ReferenceLiteralNode_Factory extends LiteralNode_Factory {

		public ReferenceLiteralNode basicNew() {
			ReferenceLiteralNode newInstance = new ReferenceLiteralNode();
			newInstance.initialize();
			return newInstance;
		}

		public ReferenceLiteralNode path_(final String[] _anArray) {
			return ((ReferenceLiteralNode) this.basicNew().initializePath_(_anArray));
		}
	}

	static public ReferenceLiteralNode _path_(Object receiver, final String[] _anArray) {
		return factory.path_(_anArray);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitReferenceLiteralNode_(this);
	}

	@Override
	public ReferenceLiteralNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public ReferenceLiteralNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return ReferenceLiteralNode.this;
			}
		});
		return this;
	}

	public ReferenceLiteralNode copy() {
		try {
			ReferenceLiteralNode _temp1 = (ReferenceLiteralNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public ReferenceLiteralNode_Factory factory() {
		return factory;
	}

	public ReferenceLiteralNode initializePath_(final String[] _anArray) {
		_path = _anArray;
		this.initialize();
		return this;
	}

	@Override
	public ReferenceLiteralNode innerSourceOn_(final StringBuilder _aStream) {
		_aStream.append("#{");
		boolean _temp1 = true;
		for (final String _each : _path) {
			if (_temp1) {
				_temp1 = false;
			} else {
				_aStream.append('.');
			}
			_aStream.append(_each);
		}
		_aStream.append('}');
		return this;
	}

	@Override
	public ReferenceLiteralNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	public String[] path() {
		return _path;
	}

	@Override
	public ReferenceLiteralNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public ReferenceLiteralNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public ReferenceLiteralNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	@Override
	public ReferenceLiteralNode sourceOn_(final StringBuilder _aStream) {
		if (!this.needsBrackets()) {
			return ReferenceLiteralNode.this.innerSourceOn_(_aStream);
		}
		_aStream.append('(');
		this.innerSourceOn_(_aStream);
		_aStream.append(')');
		return this;
	}

	@Override
	public Object value() {
		return _path;
	}

	@Override
	public ReferenceLiteralNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public ReferenceLiteralNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public ReferenceLiteralNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return ReferenceLiteralNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
