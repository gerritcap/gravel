package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.IntermediateNode;
import st.gravel.support.compiler.ast.IntermediateNode.IntermediateNode_Factory;
import st.gravel.support.compiler.ast.Expression;
import st.gravel.support.compiler.ast.SequenceNode;
import st.gravel.support.compiler.ast.TypeNode;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.KeywordMessageNode;
import st.gravel.support.compiler.ast.BlockNode;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

public class IfTrueIfFalseNode extends IntermediateNode implements Cloneable {

	public static IfTrueIfFalseNode_Factory factory = new IfTrueIfFalseNode_Factory();

	SequenceNode _falseSequence;

	TypeNode _returnType;

	Expression _test;

	SequenceNode _trueSequence;

	public static class IfTrueIfFalseNode_Factory extends IntermediateNode_Factory {

		public IfTrueIfFalseNode basicNew() {
			IfTrueIfFalseNode newInstance = new IfTrueIfFalseNode();
			newInstance.initialize();
			return newInstance;
		}

		public IfTrueIfFalseNode test_trueSequence_falseSequence_returnType_(final Expression _aVariableNode, final SequenceNode _aSequenceNode, final SequenceNode _aSequenceNode2, final TypeNode _aTypeOrNode) {
			return ((IfTrueIfFalseNode) this.basicNew().initializeTest_trueSequence_falseSequence_returnType_(_aVariableNode, _aSequenceNode, _aSequenceNode2, _aTypeOrNode));
		}
	}

	static public IfTrueIfFalseNode _test_trueSequence_falseSequence_returnType_(Object receiver, final Expression _aVariableNode, final SequenceNode _aSequenceNode, final SequenceNode _aSequenceNode2, final TypeNode _aTypeOrNode) {
		return factory.test_trueSequence_falseSequence_returnType_(_aVariableNode, _aSequenceNode, _aSequenceNode2, _aTypeOrNode);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitIfTrueIfFalseNode_(this);
	}

	@Override
	public IfTrueIfFalseNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public IfTrueIfFalseNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return IfTrueIfFalseNode.this;
			}
		});
		return this;
	}

	public IfTrueIfFalseNode copy() {
		try {
			IfTrueIfFalseNode _temp1 = (IfTrueIfFalseNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public IfTrueIfFalseNode_Factory factory() {
		return factory;
	}

	public SequenceNode falseSequence() {
		return _falseSequence;
	}

	public IfTrueIfFalseNode initializeTest_trueSequence_falseSequence_returnType_(final Expression _aVariableNode, final SequenceNode _aSequenceNode, final SequenceNode _aSequenceNode2, final TypeNode _aTypeOrNode) {
		_test = _aVariableNode;
		_trueSequence = _aSequenceNode;
		_falseSequence = _aSequenceNode2;
		_returnType = _aTypeOrNode;
		this.initialize();
		return this;
	}

	@Override
	public IfTrueIfFalseNode innerSourceOn_(final StringBuilder _aStream) {
		_aStream.append("{");
		_test.sourceOn_(_aStream);
		_aStream.append(" ifTrue: [");
		_trueSequence.sourceOn_(_aStream);
		_aStream.append("] ifFalse: [");
		_falseSequence.sourceOn_(_aStream);
		_aStream.append("]}");
		return this;
	}

	@Override
	public IfTrueIfFalseNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	@Override
	public IfTrueIfFalseNode nodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(_test);
		_aBlock.value_(_trueSequence);
		_aBlock.value_(_falseSequence);
		return this;
	}

	@Override
	public IfTrueIfFalseNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public IfTrueIfFalseNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public IfTrueIfFalseNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	public TypeNode returnType() {
		return _returnType;
	}

	@Override
	public IfTrueIfFalseNode sourceOn_(final StringBuilder _aStream) {
		_aStream.append(st.gravel.core.Symbol.value(this.getClass().getSimpleName()));
		_aStream.append(' ');
		this.innerSourceOn_(_aStream);
		return this;
	}

	public Expression test() {
		return _test;
	}

	public SequenceNode trueSequence() {
		return _trueSequence;
	}

	@Override
	public Expression unoptimized() {
		return KeywordMessageNode.factory.receiver_selector_arguments_(_test, "ifTrue:ifFalse:", st.gravel.support.jvm.ArrayFactory.with_with_(BlockNode.factory.body_(_trueSequence), BlockNode.factory.body_(_falseSequence)));
	}

	@Override
	public IfTrueIfFalseNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public IfTrueIfFalseNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public IfTrueIfFalseNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return IfTrueIfFalseNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
