package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.NumberLiteralNode;
import st.gravel.support.compiler.ast.NumberLiteralNode.NumberLiteralNode_Factory;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

public class FixedPointLiteralNode extends NumberLiteralNode implements Cloneable {

	public static FixedPointLiteralNode_Factory factory = new FixedPointLiteralNode_Factory();

	java.math.BigInteger _denominator;

	java.math.BigInteger _numerator;

	int _scale;

	public static class FixedPointLiteralNode_Factory extends NumberLiteralNode_Factory {

		public FixedPointLiteralNode basicNew() {
			FixedPointLiteralNode newInstance = new FixedPointLiteralNode();
			newInstance.initialize();
			return newInstance;
		}

		public FixedPointLiteralNode integer_fractionString_scale_(final java.math.BigInteger _anInteger, final String _aString, final int _scale) {
			final java.math.BigInteger _denominator;
			java.math.BigInteger _numerator;
			_denominator = BigInteger.valueOf(10).pow(_aString.length());
			_numerator = st.gravel.support.jvm.LargeIntegerExtensions.multiply_(_anInteger, _denominator);
			if (_aString.length() != 0) {
				_numerator = st.gravel.support.jvm.LargeIntegerExtensions.plus_(_numerator, new java.math.BigInteger(_aString));
			}
			return FixedPointLiteralNode.factory.numerator_denominator_scale_(_numerator, _denominator, _scale);
		}

		public FixedPointLiteralNode numerator_denominator_scale_(final java.math.BigInteger _anInteger, final java.math.BigInteger _anInteger2, final int _anInteger3) {
			return this.basicNew().initializeNumerator_denominator_scale_(_anInteger, _anInteger2, _anInteger3);
		}
	}

	static public FixedPointLiteralNode _integer_fractionString_scale_(Object receiver, final java.math.BigInteger _anInteger, final String _aString, final int _scale) {
		return factory.integer_fractionString_scale_(_anInteger, _aString, _scale);
	}

	static public FixedPointLiteralNode _numerator_denominator_scale_(Object receiver, final java.math.BigInteger _anInteger, final java.math.BigInteger _anInteger2, final int _anInteger3) {
		return factory.numerator_denominator_scale_(_anInteger, _anInteger2, _anInteger3);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitFixedPointLiteralNode_(this);
	}

	@Override
	public FixedPointLiteralNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public FixedPointLiteralNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return FixedPointLiteralNode.this;
			}
		});
		return this;
	}

	public FixedPointLiteralNode copy() {
		try {
			FixedPointLiteralNode _temp1 = (FixedPointLiteralNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public java.math.BigInteger denominator() {
		return _denominator;
	}

	public FixedPointLiteralNode_Factory factory() {
		return factory;
	}

	public FixedPointLiteralNode initializeNumerator_denominator_scale_(final java.math.BigInteger _anInteger, final java.math.BigInteger _anInteger2, final int _anInteger3) {
		_numerator = _anInteger;
		_denominator = _anInteger2;
		_scale = _anInteger3;
		this.initialize();
		return this;
	}

	@Override
	public FixedPointLiteralNode innerSourceOn_(final StringBuilder _aStream) {
		final int _digits;
		final int _fractionDigits;
		final int _firstDigitAfterDot;
		final String _numeratorString;
		_numeratorString = _numerator.toString();
		_digits = _numeratorString.length();
		_fractionDigits = (_denominator.toString().length() - 1);
		for (int _i = _digits; _i <= _fractionDigits; _i++) {
			if (st.gravel.support.jvm.IntegerExtensions.equals_(_i, 2)) {
				_aStream.append('.');
			}
			_aStream.append('0');
		}
		_firstDigitAfterDot = ((_digits - _fractionDigits) + 1);
		for (int _i = 1; _i <= _digits; _i++) {
			if (st.gravel.support.jvm.IntegerExtensions.equals_(_i, _firstDigitAfterDot)) {
				_aStream.append('.');
			}
			_aStream.append(_numeratorString.charAt(_i - 1));
		}
		_aStream.append('s');
		if (!st.gravel.support.jvm.IntegerExtensions.equals_(_fractionDigits, _scale)) {
			_aStream.append("" + _scale);
		}
		return this;
	}

	@Override
	public boolean isFixedPointLiteralNode() {
		return true;
	}

	@Override
	public FixedPointLiteralNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	@Override
	public FixedPointLiteralNode negated() {
		return FixedPointLiteralNode.factory.numerator_denominator_scale_(_numerator.negate(), _denominator, _scale);
	}

	public java.math.BigInteger numerator() {
		return _numerator;
	}

	@Override
	public FixedPointLiteralNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public FixedPointLiteralNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public FixedPointLiteralNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	public int scale() {
		return _scale;
	}

	@Override
	public FixedPointLiteralNode sourceOn_(final StringBuilder _aStream) {
		if (!this.needsBrackets()) {
			return FixedPointLiteralNode.this.innerSourceOn_(_aStream);
		}
		_aStream.append('(');
		this.innerSourceOn_(_aStream);
		_aStream.append(')');
		return this;
	}

	@Override
	public Object value() {
		throw new RuntimeException("Cannot calculate value");
	}

	public String valueString() {
		final StringBuilder _aStream;
		_aStream = st.gravel.support.jvm.WriteStreamFactory.on_(new String());
		this.innerSourceOn_(_aStream);
		return _aStream.toString();
	}

	@Override
	public FixedPointLiteralNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public FixedPointLiteralNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public FixedPointLiteralNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return FixedPointLiteralNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
