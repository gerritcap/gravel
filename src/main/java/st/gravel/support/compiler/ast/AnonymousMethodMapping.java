package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.AbstractMethodMapping;
import st.gravel.support.compiler.ast.AbstractMethodMapping.AbstractMethodMapping_Factory;

public class AnonymousMethodMapping extends AbstractMethodMapping implements Cloneable {

	public static AnonymousMethodMapping_Factory factory = new AnonymousMethodMapping_Factory();

	public static class AnonymousMethodMapping_Factory extends AbstractMethodMapping_Factory {

		public AnonymousMethodMapping basicNew() {
			AnonymousMethodMapping newInstance = new AnonymousMethodMapping();
			newInstance.initialize();
			return newInstance;
		}

		public AbstractMethodMapping methodHandle_definingClass_(final java.lang.invoke.MethodHandle _aJavaMethodHandle, final Class _definingClass) {
			return this.basicNew().initializeMethodHandle_definingClass_(_aJavaMethodHandle, _definingClass);
		}
	}

	static public AbstractMethodMapping _methodHandle_definingClass_(Object receiver, final java.lang.invoke.MethodHandle _aJavaMethodHandle, final Class _definingClass) {
		return factory.methodHandle_definingClass_(_aJavaMethodHandle, _definingClass);
	}

	public AnonymousMethodMapping copy() {
		try {
			AnonymousMethodMapping _temp1 = (AnonymousMethodMapping) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public AnonymousMethodMapping_Factory factory() {
		return factory;
	}

	public AnonymousMethodMapping initializeMethodHandle_definingClass_(final java.lang.invoke.MethodHandle _aJavaMethodHandle, final Class _aJavaClass) {
		_methodHandle = _aJavaMethodHandle;
		_definingClass = _aJavaClass;
		this.initialize();
		return this;
	}
}
