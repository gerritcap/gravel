package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.Node.Node_Factory;
import st.gravel.support.compiler.ast.SequenceNode;
import st.gravel.support.compiler.ast.TypeNode;
import st.gravel.support.compiler.ast.PragmaNode;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.VariableDeclarationNode;
import st.gravel.support.compiler.ast.Statement;
import st.gravel.support.compiler.ast.StringLiteralNode;
import st.gravel.support.compiler.ast.Reference;
import st.gravel.support.compiler.ast.LiteralNode;
import st.gravel.support.compiler.ast.Expression;
import st.gravel.support.compiler.ast.ArrayLiteralNode;
import st.gravel.support.compiler.ast.SymbolLiteralNode;
import st.gravel.support.compiler.ast.KeywordMessageNode;
import st.gravel.support.compiler.ast.NilLiteralNode;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

abstract public class MethodNode extends Node implements Cloneable {

	public static MethodNode_Factory factory = new MethodNode_Factory();

	SequenceNode _body;

	String _nlrMarker;

	PragmaNode[] _pragmas;

	String _protocol;

	TypeNode _returnType;

	String _selector;

	public static class MethodNode_Factory extends Node_Factory {

		public MethodNode basicNew() {
			throw new RuntimeException("MethodNode is an abstract class");
		}

		public MethodNode selector_body_returnType_pragmas_protocol_(final String _aString, final SequenceNode _aSequenceNode, final TypeNode _anUndefinedObject, final PragmaNode[] _anArray, final String _protocol) {
			return ((MethodNode) this.selector_body_returnType_pragmas_protocol_nlrMarker_(_aString, _aSequenceNode, _anUndefinedObject, _anArray, _protocol, null));
		}

		public MethodNode selector_body_returnType_pragmas_protocol_nlrMarker_(final String _aString, final SequenceNode _aSequenceNode, final TypeNode _returnType, final PragmaNode[] _anArray, final String _protocol, final String _nlrMarker) {
			return ((MethodNode) this.basicNew().initializeSelector_body_returnType_pragmas_protocol_nlrMarker_(_aString, _aSequenceNode, _returnType, _anArray, _protocol, _nlrMarker));
		}
	}

	static public MethodNode _selector_body_returnType_pragmas_protocol_(Object receiver, final String _aString, final SequenceNode _aSequenceNode, final TypeNode _anUndefinedObject, final PragmaNode[] _anArray, final String _protocol) {
		return factory.selector_body_returnType_pragmas_protocol_(_aString, _aSequenceNode, _anUndefinedObject, _anArray, _protocol);
	}

	static public MethodNode _selector_body_returnType_pragmas_protocol_nlrMarker_(Object receiver, final String _aString, final SequenceNode _aSequenceNode, final TypeNode _returnType, final PragmaNode[] _anArray, final String _protocol, final String _nlrMarker) {
		return factory.selector_body_returnType_pragmas_protocol_nlrMarker_(_aString, _aSequenceNode, _returnType, _anArray, _protocol, _nlrMarker);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitMethodNode_(this);
	}

	@Override
	public MethodNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public MethodNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return MethodNode.this;
			}
		});
		return this;
	}

	public abstract VariableDeclarationNode[] arguments();

	public SequenceNode body() {
		return _body;
	}

	public MethodNode copy() {
		try {
			MethodNode _temp1 = (MethodNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean equals(final Object _anObject) {
		if (!super.equals(_anObject)) {
			return false;
		}
		if (this._selector == null) {
			if (!(((MethodNode) _anObject)._selector == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.StringExtensions.equals_(this._selector, ((MethodNode) _anObject)._selector)) {
				return false;
			}
		}
		if (this._returnType == null) {
			if (!(((MethodNode) _anObject)._returnType == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.ObjectExtensions.equals_(this._returnType, ((MethodNode) _anObject)._returnType)) {
				return false;
			}
		}
		if (this._body == null) {
			if (!(((MethodNode) _anObject)._body == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.ObjectExtensions.equals_(this._body, ((MethodNode) _anObject)._body)) {
				return false;
			}
		}
		if (this._pragmas == null) {
			if (!(((MethodNode) _anObject)._pragmas == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.ArrayExtensions.equals_(this._pragmas, ((MethodNode) _anObject)._pragmas)) {
				return false;
			}
		}
		if (this._protocol == null) {
			if (!(((MethodNode) _anObject)._protocol == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.StringExtensions.equals_(this._protocol, ((MethodNode) _anObject)._protocol)) {
				return false;
			}
		}
		if (this._nlrMarker == null) {
			if (!(((MethodNode) _anObject)._nlrMarker == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.StringExtensions.equals_(this._nlrMarker, ((MethodNode) _anObject)._nlrMarker)) {
				return false;
			}
		}
		return true;
	}

	public MethodNode_Factory factory() {
		return factory;
	}

	public abstract boolean hasCompleteArgumentSignature();

	public boolean hasCompleteReturnSignature() {
		return (_returnType != null) || _body.returnsNothingButSelf();
	}

	public boolean hasCompleteSignature() {
		return this.hasCompleteArgumentSignature() && this.hasCompleteReturnSignature();
	}

	@Override
	public int hashCode() {
		return ((((super.hashCode() ^ _selector.hashCode()) ^ (_returnType == null ? 0 : _returnType.hashCode())) ^ (_body == null ? 0 : _body.hashCode())) ^ java.util.Arrays.hashCode(_pragmas));
	}

	public boolean hasNonLocalReturns() {
		final Object _temp1 = new Object();
		try {
			for (final Statement _rootStmt : _body.statements()) {
				_rootStmt.allNodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

					@Override
					public Object value_(final Node _node) {
						if (_node.isBlockNodeWithReturnStatements()) {
							throw new NonLocalReturn(true, _temp1);
						}
						return MethodNode.this;
					}
				});
			}
			return false;
		} catch (NonLocalReturn nlr) {
			if (nlr.marker == _temp1) {
				return (boolean) nlr.returnValue;
			} else {
				throw nlr;
			}
		}
	}

	public MethodNode initializeSelector_body_returnType_pragmas_protocol_nlrMarker_(final String _aString, final SequenceNode _aSequenceNode, final TypeNode _anUndefinedObject, final PragmaNode[] _anArray, final String _protocolString, final String _anObject) {
		_selector = _aString;
		_body = _aSequenceNode;
		_returnType = _anUndefinedObject;
		_pragmas = _anArray;
		_protocol = _protocolString;
		_nlrMarker = _anObject;
		this.initialize();
		return this;
	}

	public boolean isTraitRequirement() {
		return st.gravel.support.jvm.IntegerExtensions.equals_(_body.statements().length, 1) && _body.statements()[0].isTraitRequirementMessage();
	}

	public String[] keywords() {
		return st.gravel.core.Symbol.value(_selector).keywords();
	}

	public String[] localPrimitiveIn_nameNode_(final String _className, final StringLiteralNode _argument) {
		return st.gravel.support.jvm.ArrayFactory.with_with_(_className, _argument.value());
	}

	@Override
	public MethodNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	public String nlrMarker() {
		return _nlrMarker;
	}

	@Override
	public abstract MethodNode nodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock);

	public abstract int numArgs();

	public MethodNode ofTrait_(final Reference _aReference) {
		return this.withPropertyAt_put_(st.gravel.core.Symbol.value("trait"), StringLiteralNode.factory.value_(_aReference.toString()));
	}

	public Object pragmaPropertyAt_ifAbsent_(final st.gravel.core.Symbol _aKey, final st.gravel.support.jvm.Block0<Object> _aBlock) {
		final Object _temp1 = new Object();
		try {
			final PragmaNode _pr;
			_pr = ((PragmaNode) st.gravel.support.jvm.ArrayExtensions.detect_ifNone_(_pragmas, new st.gravel.support.jvm.Predicate1<PragmaNode>() {

				@Override
				public boolean value_(final PragmaNode _each) {
					return _each.isPropertyPragmaAt_(_aKey);
				}
			}, ((st.gravel.support.jvm.Block0<PragmaNode>) (new st.gravel.support.jvm.Block0<PragmaNode>() {

				@Override
				public PragmaNode value() {
					throw new NonLocalReturn(_aBlock.value(), _temp1);
				}
			}))));
			return ((LiteralNode) _pr.expression().arguments()[1]).value();
		} catch (NonLocalReturn nlr) {
			if (nlr.marker == _temp1) {
				return (Object) nlr.returnValue;
			} else {
				throw nlr;
			}
		}
	}

	public PragmaNode[] pragmas() {
		return _pragmas;
	}

	public abstract int precedence();

	@Override
	public MethodNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	public String[] primitiveIn_(final String _className) {
		final PragmaNode _pragma;
		final Expression _argument;
		final ArrayLiteralNode _arrayNode;
		_pragma = this.primitivePragma();
		if (_pragma == null) {
			return null;
		}
		_argument = _pragma.expression().argument();
		if (_argument.isStringLiteralNode()) {
			return MethodNode.this.localPrimitiveIn_nameNode_(_className, ((StringLiteralNode) _argument));
		}
		if (!_argument.isArrayLiteralNode()) {
			return null;
		}
		_arrayNode = ((ArrayLiteralNode) _argument);
		return st.gravel.support.jvm.ArrayExtensions.collect_(_arrayNode.value(), ((st.gravel.support.jvm.Block1<String, Object>) (new st.gravel.support.jvm.Block1<String, Object>() {

			@Override
			public String value_(final Object _e) {
				final String _str;
				_str = ((String) _e);
				return (String) _str;
			}
		})));
	}

	public PragmaNode primitivePragma() {
		return ((PragmaNode) st.gravel.support.jvm.ArrayExtensions.detect_ifNone_(_pragmas, new st.gravel.support.jvm.Predicate1<PragmaNode>() {

			@Override
			public boolean value_(final PragmaNode _e) {
				return st.gravel.support.jvm.StringExtensions.equals_(_e.expression().selector(), "primitive:");
			}
		}, ((st.gravel.support.jvm.Block0<PragmaNode>) (new st.gravel.support.jvm.Block0<PragmaNode>() {

			@Override
			public PragmaNode value() {
				return (PragmaNode) null;
			}
		}))));
	}

	@Override
	public MethodNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	public String protocol() {
		return _protocol;
	}

	public MethodNode pvtSetBody_(final SequenceNode _aSequenceNode) {
		_body = _aSequenceNode;
		return this;
	}

	public MethodNode pvtSetNlrMarker_(final String _anObject) {
		_nlrMarker = _anObject;
		return this;
	}

	public MethodNode pvtSetPragmas_(final PragmaNode[] _anArray) {
		_pragmas = _anArray;
		return this;
	}

	public MethodNode pvtSetProtocol_(final String _aString) {
		_protocol = _aString;
		return this;
	}

	@Override
	public MethodNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	@Override
	public boolean referencesSelfOrInstanceType() {
		return (_returnType != null) && _returnType.referencesSelfOrInstanceType();
	}

	public TypeNode returnType() {
		return _returnType;
	}

	public MethodNode returnTypeAndBodySourceOn_(final StringBuilder _aStream) {
		if (_returnType != null) {
			_aStream.append(' ');
			_aStream.append("{^");
			_returnType.sourceOn_(_aStream);
			_aStream.append('}');
		}
		for (final PragmaNode _each : _pragmas) {
			_aStream.append('\n');
			_aStream.append(' ');
			_each.sourceOn_(_aStream);
		}
		_body.methodSourceOn_(_aStream);
		return this;
	}

	public String selector() {
		return _selector;
	}

	@Override
	public abstract MethodNode sourceOn_(final StringBuilder _aStream);

	public abstract MethodNode typeDefsDo_(final st.gravel.support.jvm.Block1<Object, TypeNode> _aBlock);

	public MethodNode updatePragmas_(final st.gravel.support.jvm.Block1<PragmaNode, PragmaNode> _aBlock) {
		return this.withPragmas_(st.gravel.support.jvm.ArrayExtensions.collect_(_pragmas, _aBlock));
	}

	@Override
	public MethodNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public MethodNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	public MethodNode withBody_(final SequenceNode _aSequenceNode) {
		return this.copy().pvtSetBody_(_aSequenceNode);
	}

	public MethodNode withNlrMarker_(final String _anObject) {
		return this.copy().pvtSetNlrMarker_(_anObject);
	}

	public MethodNode withPragmas_(final PragmaNode[] _anArray) {
		return this.copy().pvtSetPragmas_(_anArray);
	}

	public MethodNode withPropertyAt_put_(final st.gravel.core.Symbol _aKey, final Expression _aValue) {
		if (st.gravel.support.jvm.ArrayExtensions.anySatisfy_(_pragmas, new st.gravel.support.jvm.Predicate1<PragmaNode>() {

			@Override
			public boolean value_(final PragmaNode _each) {
				return _each.isPropertyPragmaAt_(_aKey);
			}
		})) {
			return MethodNode.this.updatePragmas_(((st.gravel.support.jvm.Block1<PragmaNode, PragmaNode>) (new st.gravel.support.jvm.Block1<PragmaNode, PragmaNode>() {

				@Override
				public PragmaNode value_(final PragmaNode _each) {
					if (_each.isPropertyPragmaAt_(_aKey)) {
						return _each.withArguments_(st.gravel.support.jvm.ArrayFactory.with_with_(SymbolLiteralNode.factory.value_(_aKey), _aValue));
					} else {
						return _each;
					}
				}
			})));
		} else {
			return MethodNode.this.withPragmas_(st.gravel.support.jvm.ArrayExtensions.copyWith_(_pragmas, PragmaNode.factory.expression_(KeywordMessageNode.factory.receiver_selector_arguments_(NilLiteralNode.factory.basicNew(), "propertyAt:put:", st.gravel.support.jvm.ArrayFactory.with_with_(SymbolLiteralNode.factory.value_(_aKey), _aValue)))));
		}
	}

	public MethodNode withProtocol_(final String _aString) {
		return this.copy().pvtSetProtocol_(_aString);
	}

	@Override
	public MethodNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return MethodNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
