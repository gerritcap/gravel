package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.IntermediateNode;
import st.gravel.support.compiler.ast.IntermediateNode.IntermediateNode_Factory;
import st.gravel.support.compiler.ast.Expression;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.BinaryMessageNode;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

public class IdentityComparisonNode extends IntermediateNode implements Cloneable {

	public static IdentityComparisonNode_Factory factory = new IdentityComparisonNode_Factory();

	Expression _left;

	Expression _right;

	public static class IdentityComparisonNode_Factory extends IntermediateNode_Factory {

		public IdentityComparisonNode basicNew() {
			IdentityComparisonNode newInstance = new IdentityComparisonNode();
			newInstance.initialize();
			return newInstance;
		}

		public IdentityComparisonNode left_right_(final Expression _aVariableNode, final Expression _aVariableNode2) {
			return ((IdentityComparisonNode) this.basicNew().initializeLeft_right_(_aVariableNode, _aVariableNode2));
		}
	}

	static public IdentityComparisonNode _left_right_(Object receiver, final Expression _aVariableNode, final Expression _aVariableNode2) {
		return factory.left_right_(_aVariableNode, _aVariableNode2);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitIdentityComparisonNode_(this);
	}

	@Override
	public IdentityComparisonNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public IdentityComparisonNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return IdentityComparisonNode.this;
			}
		});
		return this;
	}

	public IdentityComparisonNode copy() {
		try {
			IdentityComparisonNode _temp1 = (IdentityComparisonNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public IdentityComparisonNode_Factory factory() {
		return factory;
	}

	public IdentityComparisonNode initializeLeft_right_(final Expression _aVariableNode, final Expression _aVariableNode2) {
		_left = _aVariableNode;
		_right = _aVariableNode2;
		this.initialize();
		return this;
	}

	@Override
	public IdentityComparisonNode innerSourceOn_(final StringBuilder _aStream) {
		_aStream.append("{");
		_left.sourceOn_(_aStream);
		_aStream.append(" == ");
		_right.sourceOn_(_aStream);
		_aStream.append("}");
		return this;
	}

	public Expression left() {
		return _left;
	}

	@Override
	public IdentityComparisonNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	@Override
	public IdentityComparisonNode nodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(_left);
		_aBlock.value_(_right);
		return this;
	}

	@Override
	public IdentityComparisonNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public IdentityComparisonNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public IdentityComparisonNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	public Expression right() {
		return _right;
	}

	@Override
	public IdentityComparisonNode sourceOn_(final StringBuilder _aStream) {
		_aStream.append(st.gravel.core.Symbol.value(this.getClass().getSimpleName()));
		_aStream.append(' ');
		this.innerSourceOn_(_aStream);
		return this;
	}

	@Override
	public Expression unoptimized() {
		return BinaryMessageNode.factory.receiver_selector_argument_(_left, "==", _right);
	}

	@Override
	public IdentityComparisonNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public IdentityComparisonNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public IdentityComparisonNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return IdentityComparisonNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
