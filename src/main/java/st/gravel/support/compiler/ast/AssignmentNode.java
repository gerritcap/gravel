package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.Expression;
import st.gravel.support.compiler.ast.Expression.Expression_Factory;
import st.gravel.support.compiler.ast.VariableNode;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

public class AssignmentNode extends Expression implements Cloneable {

	public static AssignmentNode_Factory factory = new AssignmentNode_Factory();

	Expression _value;

	VariableNode _variable;

	public static class AssignmentNode_Factory extends Expression_Factory {

		public AssignmentNode basicNew() {
			AssignmentNode newInstance = new AssignmentNode();
			newInstance.initialize();
			return newInstance;
		}

		public AssignmentNode variable_value_(final VariableNode _aVariableNode, final Expression _anIntegerLiteralNode) {
			return ((AssignmentNode) this.basicNew().initializeVariable_value_(_aVariableNode, _anIntegerLiteralNode));
		}
	}

	static public AssignmentNode _variable_value_(Object receiver, final VariableNode _aVariableNode, final Expression _anIntegerLiteralNode) {
		return factory.variable_value_(_aVariableNode, _anIntegerLiteralNode);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitAssignmentNode_(this);
	}

	@Override
	public AssignmentNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public AssignmentNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return AssignmentNode.this;
			}
		});
		return this;
	}

	public AssignmentNode copy() {
		try {
			AssignmentNode _temp1 = (AssignmentNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean equals(final Object _anObject) {
		if (!super.equals(_anObject)) {
			return false;
		}
		if (this._variable == null) {
			if (!(((AssignmentNode) _anObject)._variable == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.ObjectExtensions.equals_(this._variable, ((AssignmentNode) _anObject)._variable)) {
				return false;
			}
		}
		if (this._value == null) {
			if (!(((AssignmentNode) _anObject)._value == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.ObjectExtensions.equals_(this._value, ((AssignmentNode) _anObject)._value)) {
				return false;
			}
		}
		return true;
	}

	public AssignmentNode_Factory factory() {
		return factory;
	}

	@Override
	public int hashCode() {
		return ((super.hashCode() ^ (_variable == null ? 0 : _variable.hashCode())) ^ (_value == null ? 0 : _value.hashCode()));
	}

	public AssignmentNode initializeVariable_value_(final VariableNode _aVariableNode, final Expression _aValue) {
		_variable = _aVariableNode;
		_value = _aValue;
		this.initialize();
		return this;
	}

	@Override
	public AssignmentNode innerSourceOn_(final StringBuilder _aStream) {
		_variable.sourceOn_(_aStream);
		_aStream.append(" := ");
		_value.sourceOn_(_aStream);
		return this;
	}

	@Override
	public boolean isAssignmentNode() {
		return true;
	}

	@Override
	public AssignmentNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	@Override
	public AssignmentNode nodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(_value);
		_aBlock.value_(_variable);
		return this;
	}

	@Override
	public int precedence() {
		return 4;
	}

	@Override
	public AssignmentNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public AssignmentNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public AssignmentNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	@Override
	public AssignmentNode sourceOn_(final StringBuilder _aStream) {
		if (!this.needsBrackets()) {
			return AssignmentNode.this.innerSourceOn_(_aStream);
		}
		_aStream.append('(');
		this.innerSourceOn_(_aStream);
		_aStream.append(')');
		return this;
	}

	public Expression value() {
		return _value;
	}

	public VariableNode variable() {
		return _variable;
	}

	public String varName() {
		return _variable.name();
	}

	@Override
	public AssignmentNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public AssignmentNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public AssignmentNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return AssignmentNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
