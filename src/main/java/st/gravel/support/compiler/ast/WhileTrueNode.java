package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.WhileNode;
import st.gravel.support.compiler.ast.WhileNode.WhileNode_Factory;
import st.gravel.support.compiler.ast.SequenceNode;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

public class WhileTrueNode extends WhileNode implements Cloneable {

	public static WhileTrueNode_Factory factory = new WhileTrueNode_Factory();

	public static class WhileTrueNode_Factory extends WhileNode_Factory {

		public WhileTrueNode basicNew() {
			WhileTrueNode newInstance = new WhileTrueNode();
			newInstance.initialize();
			return newInstance;
		}

		@Override
		public WhileTrueNode testSequence_doSequence_(final SequenceNode _aSequenceNode, final SequenceNode _aSequenceNode2) {
			return ((WhileTrueNode) this.basicNew().initializeTestSequence_doSequence_(_aSequenceNode, _aSequenceNode2));
		}
	}

	static public WhileTrueNode _testSequence_doSequence_(Object receiver, final SequenceNode _aSequenceNode, final SequenceNode _aSequenceNode2) {
		return factory.testSequence_doSequence_(_aSequenceNode, _aSequenceNode2);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitWhileTrueNode_(this);
	}

	@Override
	public WhileTrueNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public WhileTrueNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return WhileTrueNode.this;
			}
		});
		return this;
	}

	public WhileTrueNode copy() {
		try {
			WhileTrueNode _temp1 = (WhileTrueNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public WhileTrueNode_Factory factory() {
		return factory;
	}

	@Override
	public WhileTrueNode initializeTestSequence_doSequence_(final SequenceNode _aSequenceNode, final SequenceNode _aSequenceNode2) {
		_testSequence = _aSequenceNode;
		_doSequence = _aSequenceNode2;
		this.initialize();
		return this;
	}

	@Override
	public WhileTrueNode innerSourceOn_(final StringBuilder _aStream) {
		_aStream.append("{[");
		_testSequence.sourceOn_(_aStream);
		if (_doSequence == null) {
			_aStream.append("] whileTrue}");
		} else {
			_aStream.append("] whileTrue: [");
			_doSequence.sourceOn_(_aStream);
			_aStream.append("]}");
		}
		return this;
	}

	@Override
	public WhileTrueNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	@Override
	public WhileTrueNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public WhileTrueNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public WhileTrueNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	@Override
	public WhileTrueNode sourceOn_(final StringBuilder _aStream) {
		_aStream.append(st.gravel.core.Symbol.value(this.getClass().getSimpleName()));
		_aStream.append(' ');
		this.innerSourceOn_(_aStream);
		return this;
	}

	@Override
	public WhileTrueNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public WhileTrueNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public WhileTrueNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return WhileTrueNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
