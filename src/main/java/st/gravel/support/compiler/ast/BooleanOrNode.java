package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.BooleanBinaryNode;
import st.gravel.support.compiler.ast.BooleanBinaryNode.BooleanBinaryNode_Factory;
import st.gravel.support.compiler.ast.Expression;
import st.gravel.support.compiler.ast.SequenceNode;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.BinaryMessageNode;
import st.gravel.support.compiler.ast.BlockNode;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

public class BooleanOrNode extends BooleanBinaryNode implements Cloneable {

	public static BooleanOrNode_Factory factory = new BooleanOrNode_Factory();

	public static class BooleanOrNode_Factory extends BooleanBinaryNode_Factory {

		public BooleanOrNode basicNew() {
			BooleanOrNode newInstance = new BooleanOrNode();
			newInstance.initialize();
			return newInstance;
		}

		@Override
		public BooleanOrNode left_right_(final Expression _anUnaryMessageNode, final SequenceNode _aSequenceNode) {
			return ((BooleanOrNode) this.basicNew().initializeLeft_right_(_anUnaryMessageNode, _aSequenceNode));
		}
	}

	static public BooleanOrNode _left_right_(Object receiver, final Expression _anUnaryMessageNode, final SequenceNode _aSequenceNode) {
		return factory.left_right_(_anUnaryMessageNode, _aSequenceNode);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitBooleanOrNode_(this);
	}

	@Override
	public BooleanOrNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public BooleanOrNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return BooleanOrNode.this;
			}
		});
		return this;
	}

	public BooleanOrNode copy() {
		try {
			BooleanOrNode _temp1 = (BooleanOrNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public BooleanOrNode_Factory factory() {
		return factory;
	}

	@Override
	public BooleanOrNode initializeLeft_right_(final Expression _anUnaryMessageNode, final SequenceNode _aSequenceNode) {
		_left = _anUnaryMessageNode;
		_right = _aSequenceNode;
		this.initialize();
		return this;
	}

	@Override
	public BooleanOrNode innerSourceOn_(final StringBuilder _aStream) {
		_left.sourceOn_(_aStream);
		_aStream.append(" or: [");
		_right.sourceOn_(_aStream);
		_aStream.append("]");
		return this;
	}

	@Override
	public BooleanOrNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	@Override
	public BooleanOrNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public BooleanOrNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public BooleanOrNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	@Override
	public BooleanOrNode sourceOn_(final StringBuilder _aStream) {
		_aStream.append(st.gravel.core.Symbol.value(this.getClass().getSimpleName()));
		_aStream.append(' ');
		this.innerSourceOn_(_aStream);
		return this;
	}

	@Override
	public Expression unoptimized() {
		return BinaryMessageNode.factory.receiver_selector_argument_(_left, "or:", BlockNode.factory.body_(_right));
	}

	@Override
	public BooleanOrNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public BooleanOrNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public BooleanOrNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return BooleanOrNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
