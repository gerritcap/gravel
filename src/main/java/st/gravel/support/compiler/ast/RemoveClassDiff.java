package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.ClassDiff;
import st.gravel.support.compiler.ast.ClassDiff.ClassDiff_Factory;
import st.gravel.support.compiler.ast.ClassNode;
import st.gravel.support.compiler.ast.DiffVisitor;
import st.gravel.support.compiler.ast.Reference;

public class RemoveClassDiff extends ClassDiff implements Cloneable {

	public static RemoveClassDiff_Factory factory = new RemoveClassDiff_Factory();

	ClassNode _classNode;

	public static class RemoveClassDiff_Factory extends ClassDiff_Factory {

		public RemoveClassDiff basicNew() {
			RemoveClassDiff newInstance = new RemoveClassDiff();
			newInstance.initialize();
			return newInstance;
		}

		public RemoveClassDiff classNode_(final ClassNode _aClassNode) {
			return ((RemoveClassDiff) this.basicNew().initializeClassNode_(_aClassNode));
		}
	}

	static public RemoveClassDiff _classNode_(Object receiver, final ClassNode _aClassNode) {
		return factory.classNode_(_aClassNode);
	}

	@Override
	public DiffVisitor accept_(final DiffVisitor _visitor) {
		return _visitor.visitRemoveClassDiff_(this);
	}

	@Override
	public RemoveClassDiff beStatic() {
		return this;
	}

	public ClassNode classNode() {
		return _classNode;
	}

	public RemoveClassDiff copy() {
		try {
			RemoveClassDiff _temp1 = (RemoveClassDiff) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public RemoveClassDiff_Factory factory() {
		return factory;
	}

	public RemoveClassDiff initializeClassNode_(final ClassNode _aClassNode) {
		_classNode = _aClassNode;
		this.initialize();
		return this;
	}

	@Override
	public Reference reference() {
		return _classNode.reference();
	}

	@Override
	public Reference superclassReference() {
		return _classNode.superclassReference();
	}
}
