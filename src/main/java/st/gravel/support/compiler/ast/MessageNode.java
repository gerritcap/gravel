package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.Expression;
import st.gravel.support.compiler.ast.Expression.Expression_Factory;
import st.gravel.support.compiler.ast.UnaryMessageNode;
import st.gravel.support.compiler.ast.BinaryMessageNode;
import st.gravel.support.compiler.ast.KeywordMessageNode;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

abstract public class MessageNode extends Expression implements Cloneable {

	public static MessageNode_Factory factory = new MessageNode_Factory();

	Expression _receiver;

	String _selector;

	public static class MessageNode_Factory extends Expression_Factory {

		public MessageNode basicNew() {
			throw new RuntimeException("MessageNode is an abstract class");
		}

		public MessageNode receiver_selector_(final Expression _aNode, final String _aString) {
			return ((MessageNode) this.basicNew().initializeReceiver_selector_(_aNode, _aString));
		}

		public MessageNode receiver_selector_arguments_(final Expression _aNode, final String _aString, final Expression[] _anArray) {
			final st.gravel.core.Symbol _sym;
			_sym = st.gravel.core.Symbol.value(_aString);
			if (_sym.isUnary()) {
				return UnaryMessageNode.factory.receiver_selector_arguments_(_aNode, _aString, _anArray);
			}
			if (_sym.isBinary()) {
				return BinaryMessageNode.factory.receiver_selector_arguments_(_aNode, _aString, _anArray);
			}
			return KeywordMessageNode.factory.receiver_selector_arguments_(_aNode, _aString, _anArray);
		}
	}

	static public MessageNode _receiver_selector_(Object receiver, final Expression _aNode, final String _aString) {
		return factory.receiver_selector_(_aNode, _aString);
	}

	static public MessageNode _receiver_selector_arguments_(Object receiver, final Expression _aNode, final String _aString, final Expression[] _anArray) {
		return factory.receiver_selector_arguments_(_aNode, _aString, _anArray);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitMessageNode_(this);
	}

	@Override
	public MessageNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public MessageNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return MessageNode.this;
			}
		});
		return this;
	}

	public abstract Expression argument();

	public abstract Expression[] arguments();

	public MessageNode copy() {
		try {
			MessageNode _temp1 = (MessageNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean equals(final Object _anObject) {
		if (!super.equals(_anObject)) {
			return false;
		}
		if (this._receiver == null) {
			if (!(((MessageNode) _anObject)._receiver == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.ObjectExtensions.equals_(this._receiver, ((MessageNode) _anObject)._receiver)) {
				return false;
			}
		}
		if (this._selector == null) {
			if (!(((MessageNode) _anObject)._selector == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.StringExtensions.equals_(this._selector, ((MessageNode) _anObject)._selector)) {
				return false;
			}
		}
		return true;
	}

	public MessageNode_Factory factory() {
		return factory;
	}

	@Override
	public int hashCode() {
		return ((super.hashCode() ^ (_receiver == null ? 0 : _receiver.hashCode())) ^ _selector.hashCode());
	}

	public MessageNode initializeReceiver_selector_(final Expression _anIntegerLiteralNode, final String _aString) {
		_receiver = _anIntegerLiteralNode;
		_selector = _aString;
		this.initialize();
		return this;
	}

	@Override
	public abstract MessageNode innerSourceOn_(final StringBuilder _aStream);

	public abstract MessageNode innerSourceSendOn_(final StringBuilder _aStream);

	@Override
	public boolean isMessageNode() {
		return true;
	}

	public String[] keywords() {
		return st.gravel.core.Symbol.value(_selector).keywords();
	}

	@Override
	public MessageNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	@Override
	public abstract MessageNode nodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock);

	public abstract int numArgs();

	@Override
	public MessageNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public MessageNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public MessageNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	public Expression receiver() {
		return _receiver;
	}

	public String selector() {
		return _selector;
	}

	@Override
	public MessageNode sourceOn_(final StringBuilder _aStream) {
		if (!this.needsBrackets()) {
			return MessageNode.this.innerSourceOn_(_aStream);
		}
		_aStream.append('(');
		this.innerSourceOn_(_aStream);
		_aStream.append(')');
		return this;
	}

	public MessageNode sourceSendOn_(final StringBuilder _aStream) {
		_aStream.append(' ');
		this.innerSourceSendOn_(_aStream);
		return this;
	}

	@Override
	public MessageNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public MessageNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	public abstract MessageNode withArguments_(final Expression[] _anArray);

	@Override
	public MessageNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return MessageNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
