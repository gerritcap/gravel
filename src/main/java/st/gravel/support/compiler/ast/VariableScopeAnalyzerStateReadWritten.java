package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.VariableScopeAnalyzerState;
import st.gravel.support.compiler.ast.VariableScopeAnalyzerState.VariableScopeAnalyzerState_Factory;
import st.gravel.support.compiler.ast.VariableScopeAnalyzerStateBlockReadAfterWritten;

public class VariableScopeAnalyzerStateReadWritten extends VariableScopeAnalyzerState implements Cloneable {

	public static VariableScopeAnalyzerStateReadWritten_Factory factory = new VariableScopeAnalyzerStateReadWritten_Factory();

	public static class VariableScopeAnalyzerStateReadWritten_Factory extends VariableScopeAnalyzerState_Factory {

		public VariableScopeAnalyzerStateReadWritten basicNew() {
			VariableScopeAnalyzerStateReadWritten newInstance = new VariableScopeAnalyzerStateReadWritten();
			newInstance.initialize();
			return newInstance;
		}
	}

	public VariableScopeAnalyzerStateReadWritten copy() {
		try {
			VariableScopeAnalyzerStateReadWritten _temp1 = (VariableScopeAnalyzerStateReadWritten) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public VariableScopeAnalyzerStateReadWritten_Factory factory() {
		return factory;
	}

	@Override
	public VariableScopeAnalyzerState withBlockRead() {
		return VariableScopeAnalyzerStateBlockReadAfterWritten.factory.basicNew();
	}

	@Override
	public VariableScopeAnalyzerState withLocalRead() {
		return this;
	}

	@Override
	public VariableScopeAnalyzerState withLocalWrite() {
		return this;
	}
}
