package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.VariableScopeAnalyzerStateUndecided;

public class VariableScopeAnalyzerState extends Object implements Cloneable {

	public static VariableScopeAnalyzerState_Factory factory = new VariableScopeAnalyzerState_Factory();

	public static class VariableScopeAnalyzerState_Factory extends st.gravel.support.jvm.SmalltalkFactory {

		public VariableScopeAnalyzerState basicNew() {
			VariableScopeAnalyzerState newInstance = new VariableScopeAnalyzerState();
			newInstance.initialize();
			return newInstance;
		}
	}

	public VariableScopeAnalyzerState copy() {
		try {
			VariableScopeAnalyzerState _temp1 = (VariableScopeAnalyzerState) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public VariableScopeAnalyzerState_Factory factory() {
		return factory;
	}

	public VariableScopeAnalyzerState initialize() {
		return this;
	}

	public boolean isBlockReadAfterWritten() {
		return false;
	}

	public boolean isUndecided() {
		return false;
	}

	public VariableScopeAnalyzerState postCopy() {
		return this;
	}

	public VariableScopeAnalyzerState withBlockRead() {
		return this;
	}

	public VariableScopeAnalyzerState withBlockWrite() {
		return VariableScopeAnalyzerStateUndecided.factory.basicNew();
	}

	public VariableScopeAnalyzerState withLocalRead() {
		return this;
	}

	public VariableScopeAnalyzerState withLocalWrite() {
		return this;
	}
}
