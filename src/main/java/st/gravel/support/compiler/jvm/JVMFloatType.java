package st.gravel.support.compiler.jvm;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.jvm.JVMPrimitiveType;
import st.gravel.support.compiler.jvm.JVMPrimitiveType.JVMPrimitiveType_Factory;
import st.gravel.support.compiler.jvm.JVMType;
import st.gravel.support.compiler.jvm.CastObjectToFloat;
import st.gravel.support.compiler.jvm.CastTo;

public class JVMFloatType extends JVMPrimitiveType implements Cloneable {

	public static JVMFloatType_Factory factory = new JVMFloatType_Factory();

	public static class JVMFloatType_Factory extends JVMPrimitiveType_Factory {

		public JVMFloatType basicNew() {
			JVMFloatType newInstance = new JVMFloatType();
			newInstance.initialize();
			return newInstance;
		}
	}

	@Override
	public JVMType commonSuperTypeWith_(final JVMType _aJVMType) {
		return _aJVMType.commonSuperTypeWithFloat_(this);
	}

	public JVMFloatType copy() {
		try {
			JVMFloatType _temp1 = (JVMFloatType) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public JVMFloatType descriptorOn_(final StringBuilder _aStream) {
		this.sourceOn_(_aStream);
		return this;
	}

	public JVMFloatType_Factory factory() {
		return factory;
	}

	@Override
	public boolean isFloatType() {
		return true;
	}

	@Override
	public CastObjectToFloat newCastInstructionFromDynamicObject() {
		return CastObjectToFloat.factory.basicNew();
	}

	@Override
	public CastTo newCastInstructionTo_(final JVMType _aJVMType) {
		return _aJVMType.newCastInstructionFromFloat();
	}

	@Override
	public JVMFloatType printOn_(final StringBuilder _aStream) {
		this.sourceOn_(_aStream);
		return this;
	}

	@Override
	public JVMFloatType sourceOn_(final StringBuilder _aStream) {
		_aStream.append('F');
		return this;
	}
}
