package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.Expression;
import st.gravel.support.compiler.ast.Expression.Expression_Factory;
import st.gravel.support.compiler.ast.MessageNode;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

public class CascadeNode extends Expression implements Cloneable {

	public static CascadeNode_Factory factory = new CascadeNode_Factory();

	MessageNode[] _messages;

	public static class CascadeNode_Factory extends Expression_Factory {

		public CascadeNode basicNew() {
			CascadeNode newInstance = new CascadeNode();
			newInstance.initialize();
			return newInstance;
		}

		public CascadeNode messages_(final MessageNode[] _anArray) {
			return ((CascadeNode) this.basicNew().initializeMessages_(_anArray));
		}
	}

	static public CascadeNode _messages_(Object receiver, final MessageNode[] _anArray) {
		return factory.messages_(_anArray);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitCascadeNode_(this);
	}

	@Override
	public CascadeNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public CascadeNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return CascadeNode.this;
			}
		});
		return this;
	}

	public CascadeNode copy() {
		try {
			CascadeNode _temp1 = (CascadeNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean equals(final Object _anObject) {
		if (!super.equals(_anObject)) {
			return false;
		}
		if (this._messages == null) {
			if (!(((CascadeNode) _anObject)._messages == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.ArrayExtensions.equals_(this._messages, ((CascadeNode) _anObject)._messages)) {
				return false;
			}
		}
		return true;
	}

	public CascadeNode_Factory factory() {
		return factory;
	}

	@Override
	public int hashCode() {
		return (super.hashCode() ^ java.util.Arrays.hashCode(_messages));
	}

	public CascadeNode initializeMessages_(final MessageNode[] _anArray) {
		_messages = _anArray;
		this.initialize();
		return this;
	}

	@Override
	public CascadeNode innerSourceOn_(final StringBuilder _aStream) {
		this.receiver().sourceOn_(_aStream);
		boolean _temp1 = true;
		for (final MessageNode _msg : _messages) {
			if (_temp1) {
				_temp1 = false;
			} else {
				_aStream.append(';');
				_aStream.append(' ');
			}
			_msg.sourceSendOn_(_aStream);
		}
		return this;
	}

	@Override
	public CascadeNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	public MessageNode[] messages() {
		return _messages;
	}

	@Override
	public CascadeNode nodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		for (final MessageNode _temp1 : _messages) {
			_aBlock.value_(_temp1);
		}
		return this;
	}

	@Override
	public int precedence() {
		return 4;
	}

	@Override
	public CascadeNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public CascadeNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public CascadeNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	public Expression receiver() {
		return _messages[0].receiver();
	}

	@Override
	public CascadeNode sourceOn_(final StringBuilder _aStream) {
		if (!this.needsBrackets()) {
			return CascadeNode.this.innerSourceOn_(_aStream);
		}
		_aStream.append('(');
		this.innerSourceOn_(_aStream);
		_aStream.append(')');
		return this;
	}

	@Override
	public CascadeNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public CascadeNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public CascadeNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return CascadeNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
