package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.ClassDiff;
import java.util.Map;
import st.gravel.support.compiler.ast.Reference;
import st.gravel.support.compiler.ast.NamespaceNode;

public class SystemDiff extends Object implements Cloneable {

	public static SystemDiff_Factory factory = new SystemDiff_Factory();

	ClassDiff[] _classDiffs;

	Map<Reference, NamespaceNode> _namespaces;

	public static class SystemDiff_Factory extends st.gravel.support.jvm.SmalltalkFactory {

		public SystemDiff basicNew() {
			SystemDiff newInstance = new SystemDiff();
			newInstance.initialize();
			return newInstance;
		}

		public SystemDiff classDiffs_namespaces_(final ClassDiff[] _anArray, final Map<Reference, NamespaceNode> _aDictionary) {
			return this.basicNew().initializeClassDiffs_namespaces_(_anArray, _aDictionary);
		}
	}

	static public SystemDiff _classDiffs_namespaces_(Object receiver, final ClassDiff[] _anArray, final Map<Reference, NamespaceNode> _aDictionary) {
		return factory.classDiffs_namespaces_(_anArray, _aDictionary);
	}

	public ClassDiff[] classDiffs() {
		return _classDiffs;
	}

	public SystemDiff copy() {
		try {
			SystemDiff _temp1 = (SystemDiff) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public SystemDiff_Factory factory() {
		return factory;
	}

	public SystemDiff initialize() {
		return this;
	}

	public SystemDiff initializeClassDiffs_namespaces_(final ClassDiff[] _anOrderedCollection, final Map<Reference, NamespaceNode> _aDictionary) {
		_classDiffs = _anOrderedCollection;
		_namespaces = _aDictionary;
		this.initialize();
		return this;
	}

	public Map<Reference, NamespaceNode> namespaces() {
		return _namespaces;
	}

	public SystemDiff postCopy() {
		return this;
	}
}
