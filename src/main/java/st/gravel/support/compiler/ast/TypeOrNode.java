package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.TypeNode;
import st.gravel.support.compiler.ast.TypeNode.TypeNode_Factory;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

public class TypeOrNode extends TypeNode implements Cloneable {

	public static TypeOrNode_Factory factory = new TypeOrNode_Factory();

	TypeNode _left;

	TypeNode _right;

	public static class TypeOrNode_Factory extends TypeNode_Factory {

		public TypeOrNode basicNew() {
			TypeOrNode newInstance = new TypeOrNode();
			newInstance.initialize();
			return newInstance;
		}

		public TypeNode left_right_(final TypeNode _aTypeVariableNode, final TypeNode _aTypeVariableNode2) {
			if (_aTypeVariableNode == null) {
				return _aTypeVariableNode2;
			}
			return this.basicNew().initializeLeft_right_(_aTypeVariableNode, _aTypeVariableNode2);
		}
	}

	static public TypeNode _left_right_(Object receiver, final TypeNode _aTypeVariableNode, final TypeNode _aTypeVariableNode2) {
		return factory.left_right_(_aTypeVariableNode, _aTypeVariableNode2);
	}

	@Override
	public TypeNode $pipe$(final TypeNode _aTypeNode) {
		if (st.gravel.support.jvm.ObjectExtensions.equals_(_left, _aTypeNode)) {
			return TypeOrNode.this;
		}
		if (st.gravel.support.jvm.ObjectExtensions.equals_(_right, _aTypeNode)) {
			return TypeOrNode.this;
		}
		return super.$pipe$(_aTypeNode);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitTypeOrNode_(this);
	}

	@Override
	public TypeOrNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public TypeOrNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return TypeOrNode.this;
			}
		});
		return this;
	}

	public TypeOrNode copy() {
		try {
			TypeOrNode _temp1 = (TypeOrNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean equals(final Object _anObject) {
		if (!super.equals(_anObject)) {
			return false;
		}
		if (this._left == null) {
			if (!(((TypeOrNode) _anObject)._left == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.ObjectExtensions.equals_(this._left, ((TypeOrNode) _anObject)._left)) {
				return false;
			}
		}
		if (this._right == null) {
			if (!(((TypeOrNode) _anObject)._right == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.ObjectExtensions.equals_(this._right, ((TypeOrNode) _anObject)._right)) {
				return false;
			}
		}
		return true;
	}

	public TypeOrNode_Factory factory() {
		return factory;
	}

	@Override
	public int hashCode() {
		return ((super.hashCode() ^ (_left == null ? 0 : _left.hashCode())) ^ (_right == null ? 0 : _right.hashCode()));
	}

	public TypeOrNode initializeLeft_right_(final TypeNode _aTypeVariableNode, final TypeNode _aTypeVariableNode2) {
		_left = _aTypeVariableNode;
		_right = _aTypeVariableNode2;
		this.initialize();
		return this;
	}

	@Override
	public TypeOrNode innerSourceOn_(final StringBuilder _aStream) {
		_left.sourceOn_(_aStream);
		_aStream.append(" | ");
		_right.sourceOn_(_aStream);
		return this;
	}

	@Override
	public boolean isOptional() {
		return _left.isNilType() || (_left.isOptional() || (_right.isNilType() || _right.isOptional()));
	}

	public TypeNode left() {
		return _left;
	}

	@Override
	public TypeOrNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	@Override
	public TypeNode mandatory() {
		if (_left.isNilType()) {
			return _right;
		}
		if (_right.isNilType()) {
			return _left;
		}
		return this;
	}

	@Override
	public TypeOrNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public TypeOrNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public TypeOrNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	@Override
	public boolean referencesSelfOrInstanceType() {
		return _left.referencesSelfOrInstanceType() || _right.referencesSelfOrInstanceType();
	}

	public TypeNode right() {
		return _right;
	}

	@Override
	public TypeOrNode sourceOn_(final StringBuilder _aStream) {
		this.innerSourceOn_(_aStream);
		return this;
	}

	@Override
	public TypeOrNode typeDefsDo_(final st.gravel.support.jvm.Block1<Object, TypeNode> _aBlock) {
		_left.typeDefsDo_(_aBlock);
		_right.typeDefsDo_(_aBlock);
		return this;
	}

	@Override
	public TypeOrNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public TypeOrNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public TypeOrNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return TypeOrNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
