package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.TypeNode;
import st.gravel.support.compiler.ast.TypeNode.TypeNode_Factory;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

public class NamespacedTypeVariableNode extends TypeNode implements Cloneable {

	public static NamespacedTypeVariableNode_Factory factory = new NamespacedTypeVariableNode_Factory();

	String[] _path;

	public static class NamespacedTypeVariableNode_Factory extends TypeNode_Factory {

		public NamespacedTypeVariableNode basicNew() {
			NamespacedTypeVariableNode newInstance = new NamespacedTypeVariableNode();
			newInstance.initialize();
			return newInstance;
		}

		public NamespacedTypeVariableNode path_(final String[] _anArray) {
			return ((NamespacedTypeVariableNode) this.basicNew().initializePath_(_anArray));
		}

		public NamespacedTypeVariableNode testCase() {
			return this.path_(new String[] { "XProgramming", "SUnit", "TestCase" });
		}
	}

	static public NamespacedTypeVariableNode _path_(Object receiver, final String[] _anArray) {
		return factory.path_(_anArray);
	}

	static public NamespacedTypeVariableNode _testCase(Object receiver) {
		return factory.testCase();
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitNamespacedTypeVariableNode_(this);
	}

	@Override
	public NamespacedTypeVariableNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public NamespacedTypeVariableNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return NamespacedTypeVariableNode.this;
			}
		});
		return this;
	}

	public NamespacedTypeVariableNode copy() {
		try {
			NamespacedTypeVariableNode _temp1 = (NamespacedTypeVariableNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean equals(final Object _anObject) {
		if (!super.equals(_anObject)) {
			return false;
		}
		if (this._path == null) {
			if (!(((NamespacedTypeVariableNode) _anObject)._path == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.ArrayExtensions.equals_(this._path, ((NamespacedTypeVariableNode) _anObject)._path)) {
				return false;
			}
		}
		return true;
	}

	public NamespacedTypeVariableNode_Factory factory() {
		return factory;
	}

	@Override
	public int hashCode() {
		return (super.hashCode() ^ java.util.Arrays.hashCode(_path));
	}

	public NamespacedTypeVariableNode initializePath_(final String[] _anArray) {
		_path = _anArray;
		this.initialize();
		return this;
	}

	@Override
	public NamespacedTypeVariableNode innerSourceOn_(final StringBuilder _aStream) {
		boolean _temp1 = true;
		for (final String _each : _path) {
			if (_temp1) {
				_temp1 = false;
			} else {
				_aStream.append('.');
			}
			_aStream.append(_each);
		}
		return this;
	}

	@Override
	public NamespacedTypeVariableNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	public String[] path() {
		return _path;
	}

	@Override
	public NamespacedTypeVariableNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public NamespacedTypeVariableNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	@Override
	public NamespacedTypeVariableNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	@Override
	public NamespacedTypeVariableNode sourceOn_(final StringBuilder _aStream) {
		this.innerSourceOn_(_aStream);
		return this;
	}

	@Override
	public NamespacedTypeVariableNode typeDefsDo_(final st.gravel.support.jvm.Block1<Object, TypeNode> _aBlock) {
		return this;
	}

	@Override
	public NamespacedTypeVariableNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public NamespacedTypeVariableNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public NamespacedTypeVariableNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return NamespacedTypeVariableNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
