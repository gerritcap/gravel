(reader defineClass: 'SimpleTraitUsageNode' superclass: 'st.gravel.support.compiler.ast.TraitUsageNode')
!
(reader addInstVar: 'reference' type: 'Reference')
!
(reader addInstVar: 'methodOperations' type: 'Array[TraitMethodOperation]')
!
(reader addMethod: 'visitor')
!
accept: visitor {NodeVisitor[X def]} {^X}
	^visitor visitSimpleTraitUsageNode: self
!
(reader addMethod: 'As yet unclassified')
!
allMethodsIn: aSystemNode {SystemNode} do: aBlock {[MethodNode, ^Object]} {^Self}
	| trait {ClassDescriptionNode} |
	trait := aSystemNode classNodeAt: reference.
	trait allMethodsIn: aSystemNode do: aBlock
!
(reader addMethod: 'As yet unclassified')
!
canUnderstand: selector {Str} in: aSystemNode {SystemNode} {^Bool}
	| trait {ClassDescriptionNode} |
	trait := aSystemNode classNodeAt: reference.
	^trait canUnderstand: selector in: aSystemNode
!
(reader addMethod: 'As yet unclassified')
!
components {^Arr[SimpleTraitUsageNode]}
	^Array with: self
!
(reader addMethod: 'As yet unclassified')
!
flattenClassDescriptionNode: aClassDescriptionNode {ClassDescriptionNode} in: aSystemNode {SystemNode} {^ClassDescriptionNode}
	| n {ClassDescriptionNode} |
	n := aClassDescriptionNode.
	self allMethodsIn: aSystemNode
		do: 
			[:method {MethodNode} |
			| canUnderstand {Bool} |
			canUnderstand := n canUnderstand: method selector in: aSystemNode.
			method isTraitRequirement
				ifTrue: 
					[canUnderstand
						ifFalse: 
							[n := n withMethodNode: (self newTraitRequirementNotDefinedFor: method) ofTrait: reference]]
				ifFalse: 
					[(n includesSelector: method selector)
						ifFalse: [n := n withMethodNode: method ofTrait: reference]]].
	^n
!
(reader addMethod: 'initialize-release')
!
initializeReference: anAbsoluteReference {Reference} methodOperations: anArray {Arr[TraitMethodOperation]} {^Self}
	reference := anAbsoluteReference.
	methodOperations := anArray.
	self initialize
!
(reader addMethod: 'accessing')
!
methodOperations {^Arr[TraitMethodOperation]}
	^methodOperations
!
(reader addMethod: 'As yet unclassified')
!
nodesDo: aBlock {[Node, ^Object]} {^Self}
	methodOperations do: aBlock
!
(reader addMethod: 'As yet unclassified')
!
prerequisiteReferences {^Arr[Reference]}
	^Array with: reference
!
(reader addMethod: 'accessing')
!
reference {^Reference}
	^reference
!
(reader addMethod: 'printing')
!
sourceOn: aStream {WStream[Char]} {^Self}
	aStream nextPutAll: reference printString
!
(reader addMethod: 'As yet unclassified')
!
withTrait: aTraitUsageNode {TraitUsageNode} {^TraitUsageNode}
	| components {Arr[SimpleTraitUsageNode]} |
	components := aTraitUsageNode components copyWith: self.
	^CompositeTraitUsageNode components: components
!
(reader addClassMethod: 'instance creation')
!
reference: anAbsoluteReference {Reference} {^SimpleTraitUsageNode}
	^self reference: anAbsoluteReference methodOperations: #()
!
(reader addClassMethod: 'instance creation')
!
reference: anAbsoluteReference {Reference} methodOperations: anArray {Arr[TraitMethodOperation]} {^SimpleTraitUsageNode}
	^self new initializeReference: anAbsoluteReference methodOperations: anArray
!
