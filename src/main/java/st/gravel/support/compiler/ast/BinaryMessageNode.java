package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.MessageNode;
import st.gravel.support.compiler.ast.MessageNode.MessageNode_Factory;
import st.gravel.support.compiler.ast.Expression;
import st.gravel.support.compiler.ast.NodeVisitor;
import st.gravel.support.compiler.ast.Node;
import st.gravel.support.compiler.ast.SourcePrinter;
import st.gravel.support.compiler.ast.SourcePosition;

public class BinaryMessageNode extends MessageNode implements Cloneable {

	public static BinaryMessageNode_Factory factory = new BinaryMessageNode_Factory();

	Expression _argument;

	public static class BinaryMessageNode_Factory extends MessageNode_Factory {

		public BinaryMessageNode basicNew() {
			BinaryMessageNode newInstance = new BinaryMessageNode();
			newInstance.initialize();
			return newInstance;
		}

		@Override
		public BinaryMessageNode receiver_selector_(final Expression _aNode, final String _aString) {
			return ((BinaryMessageNode) this.basicNew().initializeReceiver_selector_(_aNode, _aString));
		}

		public BinaryMessageNode receiver_selector_arguments_(final Expression _aNode, final String _aString, final Expression[] _anArray) {
			st.gravel.support.jvm.ObjectExtensions.assert_(this, st.gravel.support.jvm.IntegerExtensions.equals_(_anArray.length, 1));
			return ((BinaryMessageNode) this.receiver_selector_argument_(_aNode, _aString, _anArray[0]));
		}

		public BinaryMessageNode receiver_selector_argument_(final Expression _anIntegerLiteralNode, final String _aString, final Expression _anIntegerLiteralNode2) {
			return ((BinaryMessageNode) this.basicNew().initializeReceiver_selector_argument_(_anIntegerLiteralNode, _aString, _anIntegerLiteralNode2));
		}
	}

	static public BinaryMessageNode _receiver_selector_(Object receiver, final Expression _aNode, final String _aString) {
		return factory.receiver_selector_(_aNode, _aString);
	}

	static public BinaryMessageNode _receiver_selector_arguments_(Object receiver, final Expression _aNode, final String _aString, final Expression[] _anArray) {
		return factory.receiver_selector_arguments_(_aNode, _aString, _anArray);
	}

	static public BinaryMessageNode _receiver_selector_argument_(Object receiver, final Expression _anIntegerLiteralNode, final String _aString, final Expression _anIntegerLiteralNode2) {
		return factory.receiver_selector_argument_(_anIntegerLiteralNode, _aString, _anIntegerLiteralNode2);
	}

	@Override
	public <X> X accept_(final NodeVisitor<X> _visitor) {
		return _visitor.visitBinaryMessageNode_(this);
	}

	@Override
	public BinaryMessageNode allNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				return _each.withAllNodesDo_(_aBlock);
			}
		});
		return this;
	}

	@Override
	public BinaryMessageNode allNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		this.nodesDo_(new st.gravel.support.jvm.Block1<Object, Node>() {

			@Override
			public Object value_(final Node _each) {
				if (!_pruneBlock.value_(_each)) {
					return _each.withAllNodesDo_pruneWhere_(_aBlock, _pruneBlock);
				}
				return BinaryMessageNode.this;
			}
		});
		return this;
	}

	@Override
	public Expression argument() {
		return _argument;
	}

	@Override
	public Expression[] arguments() {
		return st.gravel.support.jvm.ArrayFactory.with_(_argument);
	}

	public BinaryMessageNode copy() {
		try {
			BinaryMessageNode _temp1 = (BinaryMessageNode) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public boolean equals(final Object _anObject) {
		if (!super.equals(_anObject)) {
			return false;
		}
		if (this._argument == null) {
			if (!(((BinaryMessageNode) _anObject)._argument == null)) {
				return false;
			}
		} else {
			if (!st.gravel.support.jvm.ObjectExtensions.equals_(this._argument, ((BinaryMessageNode) _anObject)._argument)) {
				return false;
			}
		}
		return true;
	}

	public BinaryMessageNode_Factory factory() {
		return factory;
	}

	@Override
	public int hashCode() {
		return (super.hashCode() ^ (_argument == null ? 0 : _argument.hashCode()));
	}

	@Override
	public BinaryMessageNode initializeReceiver_selector_(final Expression _anIntegerLiteralNode, final String _aString) {
		_receiver = _anIntegerLiteralNode;
		_selector = _aString;
		this.initialize();
		return this;
	}

	public BinaryMessageNode initializeReceiver_selector_argument_(final Expression _anIntegerLiteralNode, final String _aString, final Expression _anIntegerLiteralNode2) {
		_receiver = _anIntegerLiteralNode;
		_selector = _aString;
		_argument = _anIntegerLiteralNode2;
		this.initialize();
		return this;
	}

	@Override
	public BinaryMessageNode innerSourceOn_(final StringBuilder _aStream) {
		_receiver.sourceOn_(_aStream);
		this.sourceSendOn_(_aStream);
		return this;
	}

	@Override
	public BinaryMessageNode innerSourceSendOn_(final StringBuilder _aStream) {
		_aStream.append(_selector);
		_aStream.append(' ');
		_argument.sourceOn_(_aStream);
		return this;
	}

	@Override
	public BinaryMessageNode localVarNamesDo_(final st.gravel.support.jvm.Block1<Object, String> _aBlock) {
		return this;
	}

	@Override
	public BinaryMessageNode nodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(_receiver);
		_aBlock.value_(_argument);
		return this;
	}

	@Override
	public int numArgs() {
		return 1;
	}

	@Override
	public int precedence() {
		return 2;
	}

	@Override
	public BinaryMessageNode prettySourceOn_(final StringBuilder _aStream) {
		SourcePrinter.factory.on_(_aStream).visit_(this);
		return this;
	}

	@Override
	public BinaryMessageNode printOn_(final StringBuilder _aStream) {
		final String _title;
		_title = this.factory().toString();
		_aStream.append(st.gravel.support.jvm.CharacterExtensions.isVowel(_title.charAt(0)) ? "an " : "a ");
		_aStream.append(_title);
		_aStream.append('[');
		this.sourceOn_(_aStream);
		_aStream.append(']');
		return this;
	}

	public BinaryMessageNode pvtSetArgument_(final Expression _anExpression) {
		_argument = _anExpression;
		return this;
	}

	@Override
	public BinaryMessageNode pvtSetSourcePosition_(final SourcePosition _aSourcePosition) {
		_sourcePosition = _aSourcePosition;
		return this;
	}

	@Override
	public BinaryMessageNode sourceOn_(final StringBuilder _aStream) {
		if (!this.needsBrackets()) {
			return BinaryMessageNode.this.innerSourceOn_(_aStream);
		}
		_aStream.append('(');
		this.innerSourceOn_(_aStream);
		_aStream.append(')');
		return this;
	}

	@Override
	public BinaryMessageNode sourceSendOn_(final StringBuilder _aStream) {
		_aStream.append(' ');
		this.innerSourceSendOn_(_aStream);
		return this;
	}

	@Override
	public BinaryMessageNode withAllNodesDo_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock) {
		_aBlock.value_(this);
		this.allNodesDo_(_aBlock);
		return this;
	}

	@Override
	public BinaryMessageNode withAllNodesDo_pruneWhere_(final st.gravel.support.jvm.Block1<Object, Node> _aBlock, final st.gravel.support.jvm.Block1<Boolean, Node> _pruneBlock) {
		_aBlock.value_(this);
		this.allNodesDo_pruneWhere_(_aBlock, _pruneBlock);
		return this;
	}

	@Override
	public BinaryMessageNode withArguments_(final Expression[] _anArray) {
		st.gravel.support.jvm.ObjectExtensions.assert_(this, st.gravel.support.jvm.IntegerExtensions.equals_(_anArray.length, 1));
		return this.withArgument_(_anArray[0]);
	}

	public BinaryMessageNode withArgument_(final Expression _anExpression) {
		return this.copy().pvtSetArgument_(_anExpression);
	}

	@Override
	public BinaryMessageNode withSourcePosition_(final SourcePosition _aSourcePosition) {
		if (_sourcePosition == _aSourcePosition) {
			return BinaryMessageNode.this;
		}
		return this.copy().pvtSetSourcePosition_(_aSourcePosition);
	}
}
