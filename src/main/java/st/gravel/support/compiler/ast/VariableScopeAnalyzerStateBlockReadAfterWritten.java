package st.gravel.support.compiler.ast;

/*
	This file is automatically generated from typed smalltalk source. Do not edit by hand.
	(C) AG5.com
*/

import java.math.BigInteger;
import st.gravel.support.jvm.NonLocalReturn;
import st.gravel.support.compiler.ast.VariableScopeAnalyzerState;
import st.gravel.support.compiler.ast.VariableScopeAnalyzerState.VariableScopeAnalyzerState_Factory;
import st.gravel.support.compiler.ast.VariableScopeAnalyzerStateUndecided;

public class VariableScopeAnalyzerStateBlockReadAfterWritten extends VariableScopeAnalyzerState implements Cloneable {

	public static VariableScopeAnalyzerStateBlockReadAfterWritten_Factory factory = new VariableScopeAnalyzerStateBlockReadAfterWritten_Factory();

	public static class VariableScopeAnalyzerStateBlockReadAfterWritten_Factory extends VariableScopeAnalyzerState_Factory {

		public VariableScopeAnalyzerStateBlockReadAfterWritten basicNew() {
			VariableScopeAnalyzerStateBlockReadAfterWritten newInstance = new VariableScopeAnalyzerStateBlockReadAfterWritten();
			newInstance.initialize();
			return newInstance;
		}
	}

	public VariableScopeAnalyzerStateBlockReadAfterWritten copy() {
		try {
			VariableScopeAnalyzerStateBlockReadAfterWritten _temp1 = (VariableScopeAnalyzerStateBlockReadAfterWritten) this.clone();
			_temp1.postCopy();
			return _temp1;
		} catch (CloneNotSupportedException e) {
			throw new RuntimeException(e);
		}
	}

	public VariableScopeAnalyzerStateBlockReadAfterWritten_Factory factory() {
		return factory;
	}

	@Override
	public boolean isBlockReadAfterWritten() {
		return true;
	}

	@Override
	public VariableScopeAnalyzerState withBlockRead() {
		return this;
	}

	@Override
	public VariableScopeAnalyzerState withLocalRead() {
		return this;
	}

	@Override
	public VariableScopeAnalyzerState withLocalWrite() {
		return VariableScopeAnalyzerStateUndecided.factory.basicNew();
	}
}
